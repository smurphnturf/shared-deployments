AWSTemplateFormatVersion: '2010-09-09'
Description: >
  (qs-1ph8nehbe) 
  Serverless CICD Quick Start
  Shared services account resources for a project

Parameters:
  DevAwsAccountId: # Provided by full-stack in shared-deployments
    Description: AWS account ID for development account
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: Must be an AWS account ID
    Default: '159527342995'
  ProdAwsAccountId: # Provided by full-stack in shared-deployments
    Description: AWS account ID for production account
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: Must be an AWS account ID
    Default: '159527342995'
  ArtifactBucket: # Provided by full-stack in shared-deployments
    Description: Artifact S3 bucket
    Type: String
  ArtifactBucketKeyArn: # Provided by full-stack in shared-deployments
    Description: ARN of the artifact bucket KMS key
    Type: String
  PipelineServiceRoleArn: # Provided by full-stack in shared-deployments
    Description: Pipeline service role ARN
    Type: String
  SamTranslationBucket: # Provided by full-stack in shared-deployments
    Description: S3 bucket for SAM translations
    Type: String

Conditions:
  AddDevAccountPermissions: !Not [!Equals [ !Ref DevAwsAccountId, '' ]]
  AddProdAccountPermissions: !Not [!Equals [ !Ref ProdAwsAccountId, '' ]]

Resources:
  SecretDev:
    Condition: AddDevAccountPermissions
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret to define sensitive data for application in child accounts (Dev)
      KmsKeyId: !GetAtt SecretsManagerKey.Arn
      GenerateSecretString:
        SecretStringTemplate: '{"username": "sample-user"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Name: !Sub sample-secret-${AWS::Region}-${AWS::AccountId}-dev
      Tags:
        - Key: Stage
          Value: dev
  SecretProd:
    Condition: AddProdAccountPermissions
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Secret to define sensitive data for application in child accounts (Prod)
      KmsKeyId: !GetAtt SecretsManagerKey.Arn
      GenerateSecretString:
        SecretStringTemplate: '{"username": "sample-user"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
      Name: !Sub sample-secret-${AWS::Region}-${AWS::AccountId}-prod
      Tags:
        - Key: Stage
          Value: prod

  SecretPolicyDev:
    Condition: AddDevAccountPermissions
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretDev
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${DevAwsAccountId}:role/SampleLambdaRole-${AWS::Region}-${DevAwsAccountId}-dev
            Action:
              - secretsmanager:GetSecretValue
            Resource: '*'
            Condition:
              ForAnyValue:StringEquals: # Only the latest secret can be retrieved (per best practices)
                secretsmanager:VersionStage: AWSCURRENT

  SecretPolicyProd:
    Condition: AddProdAccountPermissions
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      SecretId: !Ref SecretProd
      ResourcePolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${ProdAwsAccountId}:role/SampleLambdaRole-${AWS::Region}-${ProdAwsAccountId}-prod
            Action:
              - secretsmanager:GetSecretValue
            Resource: '*'
            Condition:
              ForAnyValue:StringEquals: # Only the latest secret can be retrieved (per best practices)
                secretsmanager:VersionStage: AWSCURRENT

  SecretsManagerKey: # This key is used to encrypt/decrypt the secret in Secrets Manager
    Type: AWS::KMS::Key
    Properties:
      Description: "Key for encrypting sample Secret Manager secret"
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'
          - Sid: Allow the dev and prod accounts to the key
            Effect: Allow
            Principal:
              AWS:
                - !If
                  - AddDevAccountPermissions
                  - !Sub arn:aws:iam::${DevAwsAccountId}:role/SampleLambdaRole-${AWS::Region}-${DevAwsAccountId}-dev
                  - !Ref AWS::NoValue
                - !If
                  - AddProdAccountPermissions
                  - !Sub arn:aws:iam::${ProdAwsAccountId}:role/SampleLambdaRole-${AWS::Region}-${ProdAwsAccountId}-prod
                  - !Ref AWS::NoValue
            Action:
              - kms:Decrypt
            Resource: '*'

  SMSecretAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/secrets-manager
      TargetKeyId: !Ref SecretsManagerKey


  #we can create whatever pipeline for multiple projects
  #but can we have the pipeline.template.yaml folders in the project folder in a different repo? 

  #PipelineCustomDataSecret:
  #  Type: 'AWS::SecretsManager::Secret'
  #  Properties:
  #    Name: !Sub "${AppName}-secret-for-dynamic-pipeline-poc"
  #    Description: This secret is used by dynamic pipeline creater lambda as a generic parameter store to be passed per repo per branch per pipeline
  #    SecretString: !Sub '{"SecretArnDev": "${SecretDev}","SecretsManagerKey": "${SecretsManagerKey.Arn}","AppName": "${AppName}","BuildImageName": "${BuildImageName}","ArtifactBucket": "${ArtifactBucket}","ArtifactBucketKeyArn": "${ArtifactBucketKeyArn}","SamTranslationBucket": "${SamTranslationBucket}","PipelineServiceRoleArn": "${PipelineServiceRoleArn}","DevAwsAccountId": "${DevAwsAccountId}"}'


Outputs:
  SecretsManagerAliasName:
    Description: KMS key alias for the use of secrets across accounts
    Value: !Ref SecretsManagerKey
  SecretsManagerKey:
    Description: KMS key for the use of secrets across accounts
    Value: !GetAtt SecretsManagerKey.Arn
  SecretArnDev:
    Description: Dev secret ARN
    Value:
      !If
        - AddDevAccountPermissions
        - !Ref SecretDev
        - ''
  SecretArnProd:
    Description: Prod secret ARN
    Value:
      !If
        - AddProdAccountPermissions
        - !Ref SecretProd
        - ''
  CustomData:
    Description: Information about this project in JSON string
    Value: !Sub '{"SecretArnDev": "${SecretDev}","SecretsManagerKey": "${SecretsManagerKey.Arn}"}'
    Export:
      Name: sample-project-CustomData
